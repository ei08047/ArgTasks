#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
BratToolReader
"""


import utils.Edge as Edge
import utils.Node as Node
import utils.Graph as Graph
import aif.ArgumentDiagram as ArgumentDiagram
import aifdb.NodeInfo as NodeInfo
import aifdb.EdgeInfo as EdgeInfo
from aif.ArgumentMiningCorpusReader import ArgumentMiningCorpusReader

# paths
from utils.Parameters import Parameters

parameters= Parameters()
paths= parameters.paths
filenames= parameters.filenames



class BratToolReader(ArgumentMiningCorpusReader):
    
    # get argument diagram from "currentFileName" text file
    #
    # 'currentFileName.txt' was generated by AIFDB and contains the web address of the 
    # original news -> from this file it is necessary to extract the 'newsid'
    #
    # in order to obtain the corresponding argument diagram we have to extract the information 
    # contained in the json file with the same name
    def getArgumentDiagram(self, currentFileName):
        
        # Obtain 'newsid' from 'currentFileName.txt' text file
        
        newsId= int((currentFileName.split("essay"))[1])
        
        
        # obtain graph structure
        graph= self.getGraphFromBratAnnotationFile(currentFileName)
        
        # obtain original and complete text
        
        title= ""
        completeText = "" #completeText[0].encode('utf8')
        
        lineIndex= 0
        
        with open(paths["AAECCorpus"] + "/" + currentFileName + ".txt", 'r',encoding='utf-8') as textFile:
            
            for line in textFile:
                if lineIndex == 0:
                    # Title
                    title= line
                elif lineIndex > 1:
                    completeText = completeText + line
                
                lineIndex = lineIndex + 1
                
        
        # create Argument Diagram and return it
        return ArgumentDiagram.ArgumentDiagram(graph, completeText, newsId, currentFileName)
    
    #TODO: 
    def graphToAIF(self, graph):
        return None
    
    def getGraphFromBratAnnotationFile(self, currentFileName):
        
        # obtain all edges tuples, where
        # first element of the tuple is the Edge object
        # second element if the from id of the corresponding edge (will be added to the corresponding Node's below)
        edgesList= []
        
        with open(paths["AAECCorpus"] + "/" + currentFileName + ".ann", 'r') as annotationFile:
            for line in annotationFile:
                
                splittedLine= line.split("\t")
                
                if splittedLine[0][0] == "R":
                    # Line contains a relation (edge)
                    currentEdgeId= splittedLine[0]
                    edgeType= splittedLine[1].split(" ")[0]
                    currentEdgeSourceNodeId= (splittedLine[1].split(" ")[1]).split(":")[1]
                    currentEdgeTargetNodeId= (splittedLine[1].split(" ")[2]).split(":")[1]
                    
                    newEdgeInfo= EdgeInfo.EdgeInfo(currentEdgeId, edgeType)
                    
                    edgesList.append((Edge.Edge(newEdgeInfo, currentEdgeTargetNodeId), currentEdgeSourceNodeId ))
                
        
        
        # obtain all Nodes
        nodesList= []
        
        with open(paths["AAECCorpus"] + "/" + currentFileName + ".ann", 'r', encoding='utf-8') as annotationFile:
            for line in annotationFile:
                
                splittedLine= line.split("\t")
                
                if splittedLine[0][0] == "T":
                    # Line contains a node
                    adjEdges= [edgeTuple[0] for edgeTuple in edgesList if edgeTuple[1] == splittedLine[0]]
                    
                    nodesList.append(Node.Node(NodeInfo.NodeInfo(splittedLine[0], splittedLine[2], splittedLine[1].split(" ")[0], None, None, None), adjEdges))
                    
        
        return Graph.Graph(nodesList)
        
        

